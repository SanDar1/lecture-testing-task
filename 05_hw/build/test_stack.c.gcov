        -:    0:Source:C:/Users/User/source/repos/lecture-testing-task/05_hw/test_stack.c
        -:    0:Graph:./CMakeFiles/test_stack.dir/test_stack.c.gcno
        -:    0:Data:./CMakeFiles/test_stack.dir/test_stack.c.gcda
        -:    0:Runs:1
        -:    1:
        -:    2:#include "stack.h"
        -:    3:#include <assert.h>
        -:    4:#include <stdio.h>
        -:    5:
        1:    6:void test_init_destroy_stack() {
        -:    7:    Stack stack;
        1:    8:    initStack(&stack);
       1*:    9:    assert(isEmpty(&stack) == true);
        1:   10:    destroyStack(&stack);
        1:   11:}
        -:   12:
        1:   13:void test_push_pop() {
        -:   14:    Stack stack;
        1:   15:    initStack(&stack);
        -:   16:
        1:   17:    push(&stack, 10);
       1*:   18:    assert(getTop(&stack)->data == 10);
        1:   19:    push(&stack, 20);
       1*:   20:    assert(getTop(&stack)->data == 20);
        -:   21:
        1:   22:    pop(&stack);
       1*:   23:    assert(getTop(&stack)->data == 10);
        1:   24:    pop(&stack);
       1*:   25:    assert(isEmpty(&stack) == true);
        -:   26:
        1:   27:    destroyStack(&stack);
        1:   28:}
        -:   29:
        1:   30:void test_search_by_value() {
        -:   31:    Stack stack;
        1:   32:    initStack(&stack);
        -:   33:
        1:   34:    push(&stack, 10);
        1:   35:    push(&stack, 20);
        1:   36:    push(&stack, 30);
        -:   37:
       1*:   38:    assert(searchByValue(&stack, 20) != NULL);
       1*:   39:    assert(searchByValue(&stack, 40) == NULL);
        -:   40:
        1:   41:    destroyStack(&stack);
        1:   42:}
        -:   43:
        1:   44:void test_search_by_index() {
        -:   45:    Stack stack;
        1:   46:    initStack(&stack);
        -:   47:
        1:   48:    push(&stack, 10);
        1:   49:    push(&stack, 20);
        1:   50:    push(&stack, 30);
        -:   51:
       1*:   52:    assert(searchByIndex(&stack, 0)->data == 30);
       1*:   53:    assert(searchByIndex(&stack, 2)->data == 10);
       1*:   54:    assert(searchByIndex(&stack, 3) == NULL);
        -:   55:
        1:   56:    destroyStack(&stack);
        1:   57:}
        -:   58:
        1:   59:void test_traverse_stack() {
        -:   60:    Stack stack;
        1:   61:    initStack(&stack);
        -:   62:
        1:   63:    push(&stack, 10);
        1:   64:    push(&stack, 20);
        1:   65:    push(&stack, 30);
        -:   66:
        1:   67:    printf("Expected output: 30 20 10\n");
        1:   68:    printf("Actual output: ");
        1:   69:    traverseStack(&stack);
        -:   70:
        1:   71:    destroyStack(&stack);
        1:   72:}
        -:   73:
        1:   74:int main() {
        1:   75:    printf("Running tests...\n");
        1:   76:    test_init_destroy_stack();
        1:   77:    test_push_pop();
        1:   78:    test_search_by_value();
        1:   79:    test_search_by_index();
        1:   80:    test_traverse_stack();
        1:   81:    printf("All tests passed!\n");
        1:   82:    return 0;
        -:   83:}
